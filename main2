import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'dart:math';

enum Habitat { conifere, foioase, amestec }
enum Statut { comestibil, toxic, necunoscut }
enum CuloarePalarie { alb, rosu, galben, maro, brun }

class ScanPage extends StatefulWidget {
  final String Function(String) getString;

  const ScanPage({Key? key, required this.getString}) : super(key: key);

  @override
  State<ScanPage> createState() => _ScanPageState();
}

class _ScanPageState extends State<ScanPage> {
  File? _imageFile;
  Map<String, dynamic>? _matchedMushroom;
  bool _isLoading = false;

  Future<void> _pickImageAndIdentify() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.camera);

    if (picked == null) return; // utilizatorul a anulat

    setState(() {
      _isLoading = true;
    });

    _imageFile = File(picked.path);

    // Încarcă baza de date JSON
    final jsonString = await rootBundle.loadString('assets/mushrooms.json');
    final List<dynamic> mushrooms = json.decode(jsonString);

    // 🔹 Deocamdată alegem random o ciupercă ca „recunoscută”
    final randomMushroom = mushrooms[Random().nextInt(mushrooms.length)];

    setState(() {
      _matchedMushroom = randomMushroom;
      _isLoading = false;
    });
  }

  @override
  void initState() {
    super.initState();
    // Deschidem direct camera după ce se încarcă pagina
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _pickImageAndIdentify();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.getString('Scanează'))),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _matchedMushroom == null
              ? const Center(child: Text('Nu am găsit nicio ciupercă.'))
              : SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      if (_imageFile != null)
                        ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.file(_imageFile!, height: 200),
                        ),
                      const SizedBox(height: 20),
                      Text(
                        "Am găsit: ${_matchedMushroom!['name']['ro']}",
                        style: const TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 10),
                      Text(
                        _matchedMushroom!['description']['ro'],
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 20),
                      if (_matchedMushroom!['imagePath'] != null)
                        ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.asset(
                            _matchedMushroom!['imagePath'],
                            height: 200,
                          ),
                        ),
                      const SizedBox(height: 30),
                      ElevatedButton.icon(
                        icon: const Icon(Icons.camera_alt),
                        label: const Text("Scanează din nou"),
                        onPressed: _pickImageAndIdentify,
                      )
                    ],
                  ),
                ),
    );
  }
}

class PlaceholderPage extends StatelessWidget {
  final String pageName;
  const PlaceholderPage({Key? key, required this.pageName}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(pageName)),
      body: Center(child: Text('Aceasta este pagina $pageName')),
    );
  }
}

class MainMenuPage extends StatelessWidget {
  final String Function(String) getString;
  final void Function(Locale) onLocaleChange;
  final bool isAdmin;
  final void Function(bool) onAdminChange;
  final String currentThemeKey;
  final void Function(String) onThemeChange;

  const MainMenuPage({
    Key? key,
    required this.getString,
    required this.onLocaleChange,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
  }) : super(key: key);

  void _navigateTo(BuildContext context, String pageName) {
    switch (pageName) {
      case 'Scanează':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => ScanPage(getString: getString),
          ),
        );
        break;

      case 'Căutare':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => MushroomListPage(
              getString: getString,
              onLocaleChange: onLocaleChange,
              isAdmin: isAdmin,
              onAdminChange: onAdminChange,
              currentThemeKey: currentThemeKey,
              onThemeChange: onThemeChange,
            ),
          ),
        );
        break;

      case 'Quiz':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => QuizPage(getString: getString),
          ),
        );
        break;

      case 'Setări':
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => SettingsPage(
              getString: getString,
              onLocaleChange: onLocaleChange,
              isAdmin: isAdmin,
              onAdminChange: onAdminChange,
              currentThemeKey: currentThemeKey,
              onThemeChange: onThemeChange,
            ),
          ),
        );
        break;

      case 'Update':
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            title: const Text('Update'),
            content: const Text('Funcționalitatea de update nu este implementată încă.'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('OK'),
              ),
            ],
          ),
        );
        break;

      case 'Quit':
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            title: const Text('Ieșire'),
            content: const Text('Sigur vrei să închizi aplicația?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Anulează'),
              ),
              TextButton(
                onPressed: () => SystemNavigator.pop(),
                child: const Text('Ieși'),
              ),
            ],
          ),
        );
        break;

      default:
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => PlaceholderPage(pageName: pageName),
          ),
        );
    }
  }

  @override
  Widget build(BuildContext context) {
    final List<Map<String, dynamic>> options = [
      {'label': 'Scanează', 'icon': Icons.camera_alt},
      {'label': 'Căutare', 'icon': Icons.search},
      {'label': 'Quiz', 'icon': Icons.quiz},
      {'label': 'Setări', 'icon': Icons.settings},
      {'label': 'Update', 'icon': Icons.system_update},
      {'label': 'Quit', 'icon': Icons.exit_to_app},
    ];

    return Scaffold(
      appBar: AppBar(title: Text(getString('mainMenu'))),
      body: Center(
        child: ListView.builder(
          shrinkWrap: true,
          itemCount: options.length,
          itemBuilder: (context, index) {
            final option = options[index];
            return ListTile(
              leading: Icon(option['icon'] as IconData, size: 40),
              title: Text(option['label'] as String,
                  style: const TextStyle(fontSize: 18)),
              onTap: () => _navigateTo(context, option['label'] as String),
            );
          },
        ),
      ),
    );
  }
}

// Clasa Mushroom (trebuie completată cu restul după nevoi)
class Mushroom {
  final int id;
  final Map<String, String> name;
  final Habitat habitat;
  final Statut statut;
  final CuloarePalarie culoarePalarie;
  final Map<String, String> description;
  final String imagePath;

  Mushroom({
    required this.id,
    required this.name,
    required this.habitat,
    required this.statut,
    required this.culoarePalarie,
    required this.description,
    required this.imagePath,
  });

  factory Mushroom.fromJson(Map<String, dynamic> json) {
    Habitat habitat = Habitat.amestec;
    switch (json['habitat']) {
      case 'conifere':
        habitat = Habitat.conifere;
        break;
      case 'foioase':
        habitat = Habitat.foioase;
        break;
      case 'amestec':
      default:
        habitat = Habitat.amestec;
    }

    Statut statut = Statut.necunoscut;
    switch (json['statut']) {
      case 'comestibil':
        statut = Statut.comestibil;
        break;
      case 'toxic':
        statut = Statut.toxic;
        break;
      case 'necunoscut':
      default:
        statut = Statut.necunoscut;
    }

    CuloarePalarie culoarePalarie = CuloarePalarie.brun;
    switch (json['culoarePalarie']) {
      case 'alb':
        culoarePalarie = CuloarePalarie.alb;
        break;
      case 'rosu':
        culoarePalarie = CuloarePalarie.rosu;
        break;
      case 'galben':
        culoarePalarie = CuloarePalarie.galben;
        break;
      case 'maro':
        culoarePalarie = CuloarePalarie.maro;
        break;
      case 'brun':
      default:
        culoarePalarie = CuloarePalarie.brun;
    }

    return Mushroom(
      id: json['id'],
      name: Map<String, String>.from(json['name']),
      habitat: habitat,
      statut: statut,
      culoarePalarie: culoarePalarie,
      description: Map<String, String>.from(json['description']),
      imagePath: json['imagePath'] ?? '',
    );
  }
}


const supportedLocales = [
  Locale('ro'),
  Locale('en'),
  Locale('de'),
];

Map<String, Map<String, String>> localizedStrings = {
  'ro': {
    'appTitle': 'Mushroom Scanner',
    'mushroomList': 'Lista Ciuperci',
    'settings': 'Setări',
    'changeLanguage': 'Schimbă limba',
    'searchHint': 'Caută ciupercă...',
    'all': 'Toate',
    'habitat': 'Habitat',
    'statut': 'Statut',
    'culoare': 'Culoare pălărie',
    'notes': 'Notițe personale:',
    'saveNote': 'Salvează notița',
    'noteSaved': 'Notița a fost salvată',
    'adminMode': 'Mod Admin Activat',
    'enterAdminCode': 'Introdu codul admin',
    'activateAdmin': 'Activează Mod Admin',
    'adminActivated': 'Mod Admin activat cu succes',
    'adminCodeError': 'Cod admin incorect',
    'invitationCodeNeeded': 'Cod invitație necesar',
    'enterInvitationCode': 'Introduceți codul invitație',
    'invitationCodeConfirm': 'Confirmă',
    'invitationCodeCancel': 'Anulează',
    'invitationCodeIncorrect': 'Cod invitație incorect, încearcă din nou',
    'accessRestricted': 'Acces restricționat. Cod invitație necesar.',
    'changeTheme': 'Schimbă tema',
  },
  'en': {
    'appTitle': 'Mushroom Scanner',
    'mushroomList': 'Mushroom List',
    'settings': 'Settings',
    'changeLanguage': 'Change Language',
    'searchHint': 'Search mushroom...',
    'all': 'All',
    'habitat': 'Habitat',
    'statut': 'Status',
    'culoare': 'Cap color',
    'notes': 'Personal notes:',
    'saveNote': 'Save note',
    'noteSaved': 'Note saved',
    'adminMode': 'Admin Mode Activated',
    'enterAdminCode': 'Enter admin code',
    'activateAdmin': 'Activate Admin Mode',
    'adminActivated': 'Admin mode successfully activated',
    'adminCodeError': 'Incorrect admin code',
    'invitationCodeNeeded': 'Invitation code needed',
    'enterInvitationCode': 'Enter invitation code',
    'invitationCodeConfirm': 'Confirm',
    'invitationCodeCancel': 'Cancel',
    'invitationCodeIncorrect': 'Incorrect invitation code, try again',
    'accessRestricted': 'Access restricted. Invitation code required.',
    'changeTheme': 'Change Theme',
  },
  'de': {
    'appTitle': 'Pilz Scanner',
    'mushroomList': 'Pilzliste',
    'settings': 'Einstellungen',
    'changeLanguage': 'Sprache ändern',
    'searchHint': 'Pilz suchen...',
    'all': 'Alle',
    'habitat': 'Lebensraum',
    'statut': 'Status',
    'culoare': 'Hutfarbe',
    'notes': 'Persönliche Notizen:',
    'saveNote': 'Notiz speichern',
    'noteSaved': 'Notiz gespeichert',
    'adminMode': 'Admin-Modus aktiviert',
    'enterAdminCode': 'Admin-Code eingeben',
    'activateAdmin': 'Admin-Modus aktivieren',
    'adminActivated': 'Admin-Modus erfolgreich aktiviert',
    'adminCodeError': 'Falscher Admin-Code',
    'invitationCodeNeeded': 'Einladungscode benötigt',
    'enterInvitationCode': 'Einladungscode eingeben',
    'invitationCodeConfirm': 'Bestätigen',
    'invitationCodeCancel': 'Abbrechen',
    'invitationCodeIncorrect': 'Falscher Einladungscode, bitte erneut versuchen',
    'accessRestricted': 'Zugang eingeschränkt. Einladungscode erforderlich.',
    'changeTheme': 'Thema ändern',
  },
};

final Map<String, ThemeData> appThemes = {
  'dark': ThemeData.dark(useMaterial3: true),
  'green': ThemeData(colorSchemeSeed: Colors.green, useMaterial3: true),
  'blue': ThemeData(colorSchemeSeed: Colors.blue, useMaterial3: true),
  'orange': ThemeData(colorSchemeSeed: Colors.deepOrange, useMaterial3: true),
  'purple': ThemeData(colorSchemeSeed: Colors.purple, useMaterial3: true),
  'pink': ThemeData(colorSchemeSeed: Colors.pink, useMaterial3: true),
};

void main() {
  runApp( MaterialApp(
home: MainMenuPage(
  getString: (s) => s,
  onLocaleChange: (locale) {},
  isAdmin: false,
  onAdminChange: (v) {},
  currentThemeKey: 'light',
  onThemeChange: (key) {},
),

home: MainMenuPage(
  getString: getString,
  onLocaleChange: setLocale,
  isAdmin: isAdmin,
  onAdminChange: setAdmin,
  currentThemeKey: currentThemeKey,
  onThemeChange: setTheme,
  mushroomList: mushroomList, // AICI!
),


  ));
}


class MushroomScannerApp extends StatefulWidget {
  const MushroomScannerApp({super.key});

  @override
  State<MushroomScannerApp> createState() => _MushroomScannerAppState();
}
class _MushroomScannerAppState extends State<MushroomScannerApp> {
  Locale? _locale;
  bool isAdmin = false;
  late Box settingsBox;
  late String currentThemeKey;
  List<Mushroom> mushroomList = [];

  @override
  void initState() {
    super.initState();
    loadMushrooms();
    final deviceLocale = WidgetsBinding.instance.platformDispatcher.locale;
    _locale = supportedLocales.any((loc) => loc.languageCode == deviceLocale.languageCode)
        ? Locale(deviceLocale.languageCode)
        : const Locale('ro');

    settingsBox = Hive.box('appSettings');
    isAdmin = settingsBox.get('isAdmin', defaultValue: false);
    currentThemeKey = settingsBox.get('theme', defaultValue: 'green');
  }

  Future<void> loadMushrooms() async {
    final jsonString = await rootBundle.loadString('assets/mushrooms.json');
    final jsonData = json.decode(jsonString);
    setState(() {
      mushroomList = (jsonData as List).map((e) => Mushroom.fromJson(e)).toList();
    });
  }

  void setLocale(Locale locale) {
    setState(() {
      _locale = locale;
    });
  }

  void setAdmin(bool value) {
    setState(() {
      isAdmin = value;
      settingsBox.put('isAdmin', value);
    });
  }

  void setTheme(String themeKey) {
    setState(() {
      currentThemeKey = themeKey;
      settingsBox.put('theme', themeKey);
    });
  }

  String getString(String key) {
    return localizedStrings[_locale?.languageCode ?? 'ro']?[key] ?? key;
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      locale: _locale,
      supportedLocales: supportedLocales,
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      debugShowCheckedModeBanner: false,
      title: getString('appTitle'),
      theme: appThemes[currentThemeKey],
      home: MainMenuPage(
        getString: getString,
        onLocaleChange: setLocale,
        isAdmin: isAdmin,
        onAdminChange: setAdmin,
        currentThemeKey: currentThemeKey,
        onThemeChange: setTheme,
      ),
    );
  }
}


class MushroomListPage extends StatefulWidget {
  final String Function(String) getString;
  final void Function(Locale) onLocaleChange;
  final bool isAdmin;
  final void Function(bool) onAdminChange;

  // Teme
  final String currentThemeKey;
  final void Function(String) onThemeChange;

  const MushroomListPage({
    super.key,
    required this.getString,
    required this.onLocaleChange,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
  });

  @override
  State<MushroomListPage> createState() => _MushroomListPageState();
}

class _MushroomListPageState extends State<MushroomListPage> {
  List<Mushroom> mushrooms = [];
  Set<int> favoriteIds = {};
  String searchQuery = '';

  Habitat? selectedHabitat;
  Statut? selectedStatut;
  CuloarePalarie? selectedCuloare;

  late Box favoritesBox;

  @override
  void initState() {
    super.initState();
    favoritesBox = Hive.box('favoriteMushrooms');
    loadFavorites();
    loadMushrooms();
  }

  void loadFavorites() {
    final List<dynamic>? favList = favoritesBox.get('favorites');
    if (favList != null) {
      setState(() {
        favoriteIds = favList.cast<int>().toSet();
      });
    }
  }

  Future<void> loadMushrooms() async {
    final jsonString = await rootBundle.loadString('assets/mushrooms.json');
    final List<dynamic> jsonList = json.decode(jsonString);
    setState(() {
      mushrooms = jsonList.map((json) => Mushroom.fromJson(json)).toList();
    });
  }

  void toggleFavorite(int id) {
    setState(() {
      if (favoriteIds.contains(id)) {
        favoriteIds.remove(id);
      } else {
        favoriteIds.add(id);
      }
      favoritesBox.put('favorites', favoriteIds.toList());
    });
  }

  @override
  Widget build(BuildContext context) {
    final langCode = Localizations.localeOf(context).languageCode;

    final filteredMushrooms = mushrooms.where((m) {
      final matchesSearch = m.getName(langCode).toLowerCase().contains(searchQuery.toLowerCase());
      final matchesHabitat = selectedHabitat == null || m.habitat == selectedHabitat;
      final matchesStatut = selectedStatut == null || m.statut == selectedStatut;
      final matchesCuloare = selectedCuloare == null || m.culoarePalarie == selectedCuloare;
      return matchesSearch && matchesHabitat && matchesStatut && matchesCuloare;
    }).toList();

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.getString('mushroomList')),
        actions: [
          if (widget.isAdmin)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 10),
              child: Center(
                  child: Text(
                widget.getString('adminMode'),
                style: const TextStyle(
                    fontWeight: FontWeight.bold, color: Colors.yellow),
              )),
            ),
          IconButton(
            icon: const Icon(Icons.quiz),
            tooltip: 'Quiz Ciuperci',
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => QuizPage(getString: widget.getString),
                ),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => SettingsPage(
                    onLocaleChange: widget.onLocaleChange,
                    getString: widget.getString,
                    isAdmin: widget.isAdmin,
                    onAdminChange: widget.onAdminChange,
                    currentThemeKey: widget.currentThemeKey,
                    onThemeChange: widget.onThemeChange,
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              decoration: InputDecoration(
                labelText: widget.getString('searchHint'),
                prefixIcon: const Icon(Icons.search),
                border: const OutlineInputBorder(),
              ),
              onChanged: (value) {
                setState(() {
                  searchQuery = value;
                });
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                DropdownButton<Habitat>(
                  hint: Text(widget.getString('habitat')),
                  value: selectedHabitat,
                  items: [null, ...Habitat.values].map((h) {
                    return DropdownMenuItem(
                      value: h,
                      child: Text(h == null
                          ? widget.getString('all')
                          : h.toString().split('.').last),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedHabitat = value;
                    });
                  },
                ),
                DropdownButton<Statut>(
                  hint: Text(widget.getString('statut')),
                  value: selectedStatut,
                  items: [null, ...Statut.values].map((s) {
                    return DropdownMenuItem(
                      value: s,
                      child: Text(s == null
                          ? widget.getString('all')
                          : s.toString().split('.').last),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedStatut = value;
                    });
                  },
                ),
                DropdownButton<CuloarePalarie>(
                  hint: Text(widget.getString('culoare')),
                  value: selectedCuloare,
                  items: [null, ...CuloarePalarie.values].map((c) {
                    return DropdownMenuItem(
                      value: c,
                      child: Text(c == null
                          ? widget.getString('all')
                          : c.toString().split('.').last),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedCuloare = value;
                    });
                  },
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: filteredMushrooms.length,
              itemBuilder: (context, index) {
                final mushroom = filteredMushrooms[index];
                final isFav = favoriteIds.contains(mushroom.id);

                return ListTile(
                  title: Text(mushroom.getName(langCode)),
                  trailing: IconButton(
                    icon: Icon(
                      isFav ? Icons.star : Icons.star_border,
                      color: isFav ? Colors.yellow : null,
                    ),
                    onPressed: () => toggleFavorite(mushroom.id),
                  ),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => MushroomDetailPage(
                          mushroom: mushroom,
                          getString: widget.getString,
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class MushroomDetailPage extends StatefulWidget {
  final Mushroom mushroom;
  final String Function(String) getString;

  const MushroomDetailPage({super.key, required this.mushroom, required this.getString});

  @override
  State<MushroomDetailPage> createState() => _MushroomDetailPageState();
}

class _MushroomDetailPageState extends State<MushroomDetailPage> {
  late Box favoritesBox;
  late Box notesBox;
  late Box accessBox;

  bool isFavorite = false;
  String userNote = '';

  late TextEditingController _noteController;
  bool accessGranted = false;

  @override
  void initState() {
    super.initState();
    favoritesBox = Hive.box('favoriteMushrooms');
    notesBox = Hive.box('mushroomNotes');
    accessBox = Hive.box('accessControl');

    final favList = favoritesBox.get('favorites')?.cast<int>() ?? [];
    final notesMap = Map<int, String>.from(notesBox.get('notes') ?? {});

    isFavorite = favList.contains(widget.mushroom.id);
    userNote = notesMap[widget.mushroom.id] ?? '';

    _noteController = TextEditingController(text: userNote);

    _checkAccess();
  }

  Future<void> _checkAccess() async {
    // Dacă avem cod invitație valid, acces nelimitat
    if (accessBox.get('hasValidInvitationCode', defaultValue: false)) {
      setState(() {
        accessGranted = true;
      });
      return;
    }

    if (!accessBox.containsKey('freeAttempts')) {
      await accessBox.put('freeAttempts', 5);
    }

    int attemptsLeft = accessBox.get('freeAttempts');

    if (attemptsLeft > 0) {
      attemptsLeft--;
      await accessBox.put('freeAttempts', attemptsLeft);
      setState(() {
        accessGranted = true;
      });
    } else {
      _showInvitationCodeDialog();
    }
  }

  void _showInvitationCodeDialog() {
    final TextEditingController codeController = TextEditingController();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          title: Text(widget.getString('invitationCodeNeeded')),
          content: TextField(
            controller: codeController,
            autofocus: true,
            decoration: InputDecoration(hintText: widget.getString('enterInvitationCode')),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pop(); // întoarce la lista ciuperci
              },
              child: Text(widget.getString('invitationCodeCancel')),
            ),
            TextButton(
              onPressed: () {
                final inputCode = codeController.text.trim();
                if (inputCode == 'INV2025') {
                  accessBox.put('hasValidInvitationCode', true);
                  Navigator.of(context).pop();
                  setState(() {
                    accessGranted = true;
                  });
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    content: Text(widget.getString('invitationCodeIncorrect')),
                    backgroundColor: Colors.red,
                  ));
                }
              },
              child: Text(widget.getString('invitationCodeConfirm')),
            ),
          ],
        );
      },
    );
  }

  void toggleFavorite() {
    setState(() {
      isFavorite = !isFavorite;
      final favList = favoritesBox.get('favorites')?.cast<int>() ?? [];
      if (isFavorite) {
        favList.add(widget.mushroom.id);
      } else {
        favList.remove(widget.mushroom.id);
      }
      favoritesBox.put('favorites', favList);
    });
  }

  void saveNote() {
    final notesMap = Map<int, String>.from(notesBox.get('notes') ?? {});
    notesMap[widget.mushroom.id] = _noteController.text;
    notesBox.put('notes', notesMap);
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text(widget.getString('noteSaved')),
    ));
  }

  @override
  Widget build(BuildContext context) {
    final langCode = Localizations.localeOf(context).languageCode;

    if (!accessGranted) {
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.getString('appTitle')),
        ),
        body: Center(
          child: Text(widget.getString('accessRestricted')),
        ),
      );
    }

    // Widget de atenționare dacă ciuperca este toxică sau necunoscută
    Widget? warningWidget;
    if (widget.mushroom.statut == Statut.toxic || widget.mushroom.statut == Statut.necunoscut) {
      warningWidget = Container(
        margin: const EdgeInsets.only(bottom: 12),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.red.shade100,
          border: Border.all(color: Colors.red, width: 2),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: const [
            Icon(Icons.warning_amber_rounded, color: Colors.red, size: 30),
            SizedBox(width: 10),
            Expanded(
              child: Text(
                '⚠️ Atenție: Compară această specie cu altele similare!',
                style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.mushroom.getName(langCode)),
        actions: [
          IconButton(
            icon: Icon(isFavorite ? Icons.star : Icons.star_border),
            onPressed: toggleFavorite,
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (warningWidget != null) warningWidget,
            Image.asset(widget.mushroom.imagePath, height: 200),
            const SizedBox(height: 12),
            Text(
              widget.mushroom.getDescription(langCode),
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 20),
            Text(widget.getString('notes'), style: const TextStyle(fontWeight: FontWeight.bold)),
            TextField(
              controller: _noteController,
              maxLines: 4,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                hintText: widget.getString('notes'),
              ),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: saveNote,
              child: Text(widget.getString('saveNote')),
            ),
          ],
        ),
      ),
    );
  }
}

class SettingsPage extends StatelessWidget {
  final void Function(Locale) onLocaleChange;
  final String Function(String) getString;
  final bool isAdmin;
  final void Function(bool) onAdminChange;

  final String currentThemeKey;
  final void Function(String) onThemeChange;

  const SettingsPage({
    super.key,
    required this.onLocaleChange,
    required this.getString,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
  });

  void _showAdminCodeDialog(BuildContext context) {
    final TextEditingController codeController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(getString('enterAdminCode')),
          content: TextField(
            controller: codeController,
            obscureText: true,
            decoration: InputDecoration(hintText: getString('enterAdminCode')),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(getString('adminCodeError')),
            ),
            TextButton(
              onPressed: () {
                if (codeController.text == 'Wyaly1995') {
                  onAdminChange(true);
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(getString('adminActivated'))),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(getString('adminCodeError'))),
                  );
                }
              },
              child: Text(getString('activateAdmin')),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(getString('settings')),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            Text(getString('changeLanguage'), style: const TextStyle(fontWeight: FontWeight.bold)),
            Wrap(
              spacing: 10,
              children: supportedLocales.map((loc) {
                return ChoiceChip(
                  label: Text(loc.languageCode.toUpperCase()),
                  selected: Localizations.localeOf(context).languageCode == loc.languageCode,
                  onSelected: (_) => onLocaleChange(loc),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            Text(getString('changeTheme'), style: const TextStyle(fontWeight: FontWeight.bold)),
            Wrap(
              spacing: 10,
              children: appThemes.keys.map((themeKey) {
                return ChoiceChip(
                  label: Text(themeKey),
                  selected: currentThemeKey == themeKey,
                  onSelected: (_) => onThemeChange(themeKey),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            if (!isAdmin)
              ElevatedButton(
                onPressed: () => _showAdminCodeDialog(context),
                child: Text(getString('activateAdmin')),
              ),
            if (isAdmin)
              Text(
                getString('adminMode'),
                style: const TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
              ),
          ],
        ),
      ),
    );
  }
}

// MODEL PENTRU ÎNTREBARE QUIZ
class QuizQuestion {
  final String question;
  final List<String> options;
  final int correctAnswerIndex;

  QuizQuestion({
    required this.question,
    required this.options,
    required this.correctAnswerIndex,
  });
}

// PAGINA QUIZ
class QuizPage extends StatefulWidget {
  final String Function(String) getString;

  const QuizPage({super.key, required this.getString});

  @override
  State<QuizPage> createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  final List<QuizQuestion> questions = [
    QuizQuestion(
      question: 'Ce habitat preferă ciupercile conifere?',
      options: ['Păduri de conifere', 'Păduri foioase', 'Zone umede'],
      correctAnswerIndex: 0,
    ),
    QuizQuestion(
      question: 'Ce culoare are pălăria ciupercii Amanita muscaria?',
      options: ['Roșu', 'Alb', 'Galben'],
      correctAnswerIndex: 0,
    ),
    QuizQuestion(
      question: 'Care este statutul ciupercii Amanita phalloides?',
      options: ['Toxic', 'Comestibil', 'Necunoscut'],
      correctAnswerIndex: 0,
    ),
  ];

  int currentQuestionIndex = 0;
  int score = 0;
  bool answered = false;
  int? selectedOptionIndex;

  void selectOption(int index) {
    if (answered) return;

    setState(() {
      selectedOptionIndex = index;
      answered = true;
      if (index == questions[currentQuestionIndex].correctAnswerIndex) {
        score++;
      }
    });
  }

  void nextQuestion() {
    setState(() {
      currentQuestionIndex++;
      answered = false;
      selectedOptionIndex = null;
    });
  }

  void restartQuiz() {
    setState(() {
      currentQuestionIndex = 0;
      score = 0;
      answered = false;
      selectedOptionIndex = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (currentQuestionIndex >= questions.length) {
      // Ecran final cu scor
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.getString('appTitle') + ' - Quiz'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Ai terminat quizul!\nScor: $score/${questions.length}',
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 24),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: restartQuiz,
                child: const Text('Reîncepe quizul'),
              ),
              const SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('Înapoi la listă'),
              ),
            ],
          ),
        ),
      );
    }

    final question = questions[currentQuestionIndex];

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.getString('appTitle') + ' - Quiz'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              'Întrebarea ${currentQuestionIndex + 1} din ${questions.length}:',
              style: const TextStyle(fontSize: 20),
            ),
            const SizedBox(height: 10),
            Text(
              question.question,
              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            ...List.generate(
              question.options.length,
              (index) => Padding(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: answered
                        ? (index == question.correctAnswerIndex
                            ? Colors.green
                            : (index == selectedOptionIndex ? Colors.red : null))
                        : null,
                  ),
                  onPressed: () => selectOption(index),
                  child: Text(question.options[index]),
                ),
              ),
            ),
            const Spacer(),
            if (answered)
              ElevatedButton(
                onPressed: nextQuestion,
                child: Text(currentQuestionIndex == questions.length - 1
                    ? 'Vezi scorul'
                    : 'Următoarea întrebare'),
              ),
          ],
        ),
      ),
    );
  }
}
