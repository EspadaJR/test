import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:image_picker/image_picker.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Hive.initFlutter();
  await Hive.openBox('appSettings');
  await Hive.openBox('favoriteMushrooms');
  await Hive.openBox('mushroomNotes');
  await Hive.openBox('accessControl');

  runApp(const MyApp());
}

enum Habitat { conifere, foioase, amestec }
enum Statut { comestibil, toxic, necunoscut }
enum CuloarePalarie { alb, rosu, galben, maro, brun }


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        body: Stack(
          children: [
            // Fundalul
            Positioned.fill(
              child: Image.asset(
                'assets/images/background.png',
                fit: BoxFit.cover,
              ),
            ),

            // Meniul peste fundal
            Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "Meniu Principal",
                    style: TextStyle(
                      fontSize: 30,
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      shadows: [
                        Shadow(
                          blurRadius: 8,
                          color: Colors.black.withOpacity(0.6),
                          offset: Offset(2, 2),
                        )
                      ],
                    ),
                  ),
                  const SizedBox(height: 30),

                  // Buton Scanare
                  ElevatedButton(
                    onPressed: () {
                      // aici mergi la pagina Scanare
                    },
                    child: const Text("üì∑ ScaneazƒÉ"),
                  ),
                  const SizedBox(height: 12),

                  // Buton CƒÉutare
                  ElevatedButton(
                    onPressed: () {
                      // aici mergi la pagina CƒÉutare
                    },
                    child: const Text("üîç CƒÉutare"),
                  ),
                  const SizedBox(height: 12),

                  // Buton SetƒÉri
                  ElevatedButton(
                    onPressed: () {
                      // aici mergi la SetƒÉri
                    },
                    child: const Text("‚öôÔ∏è SetƒÉri"),
                  ),
                  const SizedBox(height: 12),

                  // Buton Quiz
                  ElevatedButton(
                    onPressed: () {
                      // aici mergi la Quiz
                    },
                    child: const Text("‚ùì Quiz"),
                  ),
                  const SizedBox(height: 12),

                  // Buton Quit cu confirmare
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                    onPressed: () {
                      _confirmExit(context);
                    },
                    child: const Text("üö™ Quit"),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _confirmExit(BuildContext context) {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text("Confirmare"),
        content: const Text("Sigur vrei sƒÉ √Ænchizi aplica»õia?"),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(ctx).pop(),
            child: const Text("Nu"),
          ),
          TextButton(
            onPressed: () {
              exit(0); // √Ænchide aplica»õia
            },
            child: const Text("Da"),
          ),
        ],
      ),
    );
  }
}



class Mushroom {
  final int id;
  final Map<String, String> name;
  final Habitat habitat;
  final Statut statut;
  final CuloarePalarie culoarePalarie;
  final Map<String, String> description;
  final String imagePath;

  Mushroom({
    required this.id,
    required this.name,
    required this.habitat,
    required this.statut,
    required this.culoarePalarie,
    required this.description,
    required this.imagePath,
  });

  factory Mushroom.fromJson(Map<String, dynamic> json) {
    return Mushroom(
      id: json['id'],
      name: Map<String, String>.from(json['name']),
      habitat: Habitat.values.firstWhere((e) => e.toString().split('.').last == json['habitat']),
      statut: Statut.values.firstWhere((e) => e.toString().split('.').last == json['statut']),
      culoarePalarie: CuloarePalarie.values.firstWhere((e) => e.toString().split('.').last == json['culoarePalarie']),
      description: Map<String, String>.from(json['description']),
      imagePath: json['imagePath'],
    );
  }

  String getName(String langCode) {
    return name[langCode] ?? name['ro'] ?? '';
  }

  String getDescription(String langCode) {
    return description[langCode] ?? description['ro'] ?? '';
  }
}

const supportedLocales = [
  Locale('ro'),
  Locale('en'),
  Locale('de'),
];

final Map<String, Map<String, String>> localizedStrings = {
  'ro': {
    'appTitle': 'Scanner Ciuperci',
    'mushroomList': 'Lista Ciuperci',
    'settings': 'SetƒÉri',
    'searchHint': 'CautƒÉ ciupercƒÉ...',
    'all': 'Toate',
    'habitat': 'Habitat',
    'statut': 'Statut',
    'culoare': 'Culoare pƒÉlƒÉrie',
    'notes': 'Noti»õe personale:',
    'saveNote': 'SalveazƒÉ noti»õa',
    'noteSaved': 'Noti»õa a fost salvatƒÉ',
    'adminMode': 'Mod Admin Activat',
    'enterAdminCode': 'Introdu codul admin',
    'activateAdmin': 'ActiveazƒÉ Mod Admin',
    'adminActivated': 'Mod Admin activat cu succes',
    'adminCodeError': 'Cod admin incorect',
    'invitationCodeNeeded': 'Cod invita»õie necesar',
    'enterInvitationCode': 'Introduce»õi codul invita»õie',
    'invitationCodeConfirm': 'ConfirmƒÉ',
    'invitationCodeCancel': 'AnuleazƒÉ',
    'invitationCodeIncorrect': 'Cod invita»õie incorect, √ÆncearcƒÉ din nou',
    'accessRestricted': 'Acces restric»õionat. Cod invita»õie necesar.',
    'changeLanguage': 'SchimbƒÉ limba',
    'changeTheme': 'SchimbƒÉ tema',
    'scan': 'ScaneazƒÉ',
    'quitConfirm': 'Dore»ôti sƒÉ ie»ôi din aplica»õie?',
    'yes': 'Da',
    'no': 'Nu',
  },
  'en': {
    'appTitle': 'Mushroom Scanner',
    'mushroomList': 'Mushroom List',
    'settings': 'Settings',
    'searchHint': 'Search mushroom...',
    'all': 'All',
    'habitat': 'Habitat',
    'statut': 'Status',
    'culoare': 'Cap color',
    'notes': 'Personal notes:',
    'saveNote': 'Save note',
    'noteSaved': 'Note saved',
    'adminMode': 'Admin Mode Activated',
    'enterAdminCode': 'Enter admin code',
    'activateAdmin': 'Activate Admin Mode',
    'adminActivated': 'Admin mode successfully activated',
    'adminCodeError': 'Incorrect admin code',
    'invitationCodeNeeded': 'Invitation code needed',
    'enterInvitationCode': 'Enter invitation code',
    'invitationCodeConfirm': 'Confirm',
    'invitationCodeCancel': 'Cancel',
    'invitationCodeIncorrect': 'Incorrect invitation code, try again',
    'accessRestricted': 'Access restricted. Invitation code required.',
    'changeLanguage': 'Change Language',
    'changeTheme': 'Change Theme',
    'scan': 'Scan',
    'quitConfirm': 'Do you want to quit the app?',
    'yes': 'Yes',
    'no': 'No',
  },
  'de': {
    'appTitle': 'Pilz Scanner',
    'mushroomList': 'Pilzliste',
    'settings': 'Einstellungen',
    'searchHint': 'Pilz suchen...',
    'all': 'Alle',
    'habitat': 'Lebensraum',
    'statut': 'Status',
    'culoare': 'Hutfarbe',
    'notes': 'Pers√∂nliche Notizen:',
    'saveNote': 'Notiz speichern',
    'noteSaved': 'Notiz gespeichert',
    'adminMode': 'Admin-Modus aktiviert',
    'enterAdminCode': 'Admin-Code eingeben',
    'activateAdmin': 'Admin-Modus aktivieren',
    'adminActivated': 'Admin-Modus erfolgreich aktiviert',
    'adminCodeError': 'Falscher Admin-Code',
    'invitationCodeNeeded': 'Einladungscode ben√∂tigt',
    'enterInvitationCode': 'Einladungscode eingeben',
    'invitationCodeConfirm': 'Best√§tigen',
    'invitationCodeCancel': 'Abbrechen',
    'invitationCodeIncorrect': 'Falscher Einladungscode, bitte erneut versuchen',
    'accessRestricted': 'Zugang eingeschr√§nkt. Einladungscode erforderlich.',
    'changeLanguage': 'Sprache √§ndern',
    'changeTheme': 'Thema √§ndern',
    'scan': 'Scannen',
    'quitConfirm': 'M√∂chten Sie die App beenden?',
    'yes': 'Ja',
    'no': 'Nein',
  },
};

final Map<String, ThemeData> appThemes = {
  'dark': ThemeData.dark(useMaterial3: true),
  'green': ThemeData(colorSchemeSeed: Colors.green, useMaterial3: true),
  'blue': ThemeData(colorSchemeSeed: Colors.blue, useMaterial3: true),
  'orange': ThemeData(colorSchemeSeed: Colors.deepOrange, useMaterial3: true),
  'purple': ThemeData(colorSchemeSeed: Colors.purple, useMaterial3: true),
  'pink': ThemeData(colorSchemeSeed: Colors.pink, useMaterial3: true),
};

class MushroomScannerApp extends StatefulWidget {
  const MushroomScannerApp({super.key});

  @override
  State<MushroomScannerApp> createState() => _MushroomScannerAppState();
}

class _MushroomScannerAppState extends State<MushroomScannerApp> {
  Locale? _locale;
  bool isAdmin = false;
  late Box settingsBox;
  late String currentThemeKey;
  List<Mushroom> mushroomList = [];

  @override
  void initState() {
    super.initState();
    settingsBox = Hive.box('appSettings');

    currentThemeKey = settingsBox.get('theme', defaultValue: 'green');
    isAdmin = settingsBox.get('isAdmin', defaultValue: false);

    final deviceLocale = WidgetsBinding.instance.platformDispatcher.locale;
    _locale = supportedLocales.any((loc) => loc.languageCode == deviceLocale.languageCode)
        ? Locale(deviceLocale.languageCode)
        : const Locale('ro');

    loadMushrooms();
  }

  Future<void> loadMushrooms() async {
    final jsonString = await rootBundle.loadString('assets/mushrooms.json');
    final jsonData = json.decode(jsonString);
    setState(() {
      mushroomList = (jsonData as List).map((e) => Mushroom.fromJson(e)).toList();
    });
  }

  void setLocale(Locale locale) {
    setState(() {
      _locale = locale;
    });
  }

  void setAdmin(bool value) {
    setState(() {
      isAdmin = value;
      settingsBox.put('isAdmin', value);
    });
  }

  void setTheme(String themeKey) {
    setState(() {
      currentThemeKey = themeKey;
      settingsBox.put('theme', themeKey);
    });
  }

  String getString(String key) {
    return localizedStrings[_locale?.languageCode ?? 'ro']?[key] ?? key;
  }

  @override
  Widget build(BuildContext context) {
    if (mushroomList.isEmpty) {
      return MaterialApp(
        home: Scaffold(
          body: Center(child: CircularProgressIndicator()),
        ),
      );
    }

    return MaterialApp(
      locale: _locale,
      supportedLocales: supportedLocales,
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      debugShowCheckedModeBanner: false,
      title: getString('appTitle'),
      theme: appThemes[currentThemeKey],
      home: MainMenuPage(
        getString: getString,
        onLocaleChange: setLocale,
        isAdmin: isAdmin,
        onAdminChange: setAdmin,
        currentThemeKey: currentThemeKey,
        onThemeChange: setTheme,
        mushroomList: mushroomList,
      ),
    );
  }
}

class MainMenuPage extends StatelessWidget {
  final String Function(String) getString;
  final void Function(Locale) onLocaleChange;
  final bool isAdmin;
  final void Function(bool) onAdminChange;
  final String currentThemeKey;
  final void Function(String) onThemeChange;
  final List<Mushroom> mushroomList;

  const MainMenuPage({
    super.key,
    required this.getString,
    required this.onLocaleChange,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
    required this.mushroomList,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(getString('appTitle')),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Wrap(
            spacing: 20,
            runSpacing: 20,
            alignment: WrapAlignment.center,
            children: [
              ElevatedButton.icon(
                icon: const Icon(Icons.camera_alt),
                label: Text(getString('scan')),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => ScanPage(getString: getString, mushroomList: mushroomList),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(150, 50),
                ),
              ),
              ElevatedButton.icon(
                icon: const Icon(Icons.list),
                label: Text(getString('mushroomList')),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => MushroomListPage(
                        getString: getString,
                        onLocaleChange: onLocaleChange,
                        isAdmin: isAdmin,
                        onAdminChange: onAdminChange,
                        currentThemeKey: currentThemeKey,
                        onThemeChange: onThemeChange,
                      ),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(150, 50),
                ),
              ),
              ElevatedButton.icon(
                icon: const Icon(Icons.settings),
                label: Text(getString('settings')),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => SettingsPage(
                        getString: getString,
                        onLocaleChange: onLocaleChange,
                        isAdmin: isAdmin,
                        onAdminChange: onAdminChange,
                        currentThemeKey: currentThemeKey,
                        onThemeChange: onThemeChange,
                      ),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(150, 50),
                ),
              ),
              ElevatedButton.icon(
                icon: const Icon(Icons.quiz),
                label: const Text('Quiz'),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => QuizPage(getString: getString),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(150, 50),
                ),
              ),
              ElevatedButton.icon(
                icon: const Icon(Icons.exit_to_app),
                label: Text('Quit'),
                onPressed: () {
                  showDialog(
                    context: context,
                    builder: (context) {
                      return AlertDialog(
                        title: Text(getString('quitConfirm')),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.of(context).pop(),
                            child: Text(getString('no')),
                          ),
                          TextButton(
                            onPressed: () => exit(0),
                            child: Text(getString('yes')),
                          ),
                        ],
                      );
                    },
                  );
                },
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(150, 50),
                  backgroundColor: Colors.red,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class ScanPage extends StatefulWidget {
  final String Function(String) getString;
  final List<Mushroom> mushroomList;

  const ScanPage({super.key, required this.getString, required this.mushroomList});

  @override
  State<ScanPage> createState() => _ScanPageState();
}

class _ScanPageState extends State<ScanPage> {
  File? _imageFile;
  final ImagePicker _picker = ImagePicker();
  Mushroom? _matchedMushroom;
  bool _loading = false;

  @override
  void initState() {
    super.initState();
    _takePhoto();
  }

  Future<void> _takePhoto() async {
    setState(() {
      _loading = true;
    });
    final XFile? photo = await _picker.pickImage(source: ImageSource.camera);
    if (photo == null) {
      Navigator.of(context).pop();
      return;
    }
    setState(() {
      _imageFile = File(photo.path);
    });
    await _processImage();
    setState(() {
      _loading = false;
    });
  }

  Future<void> _processImage() async {
    // TODO: Implement real image recognition.
    // Here a dummy matching by random or simple heuristic.

    // For demo, just pick the first mushroom as "matched"
    if (widget.mushroomList.isNotEmpty) {
      setState(() {
        _matchedMushroom = widget.mushroomList.first;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final langCode = Localizations.localeOf(context).languageCode;
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.getString('scan')),
      ),
      body: Center(
        child: _loading
            ? const CircularProgressIndicator()
            : _imageFile == null
                ? Text(widget.getString('scan'))
                : _matchedMushroom == null
                    ? Text('No match found')
                    : MushroomDetailPage(mushroom: _matchedMushroom!, getString: widget.getString),
      ),
    );
  }
}

class MushroomListPage extends StatefulWidget {
  final String Function(String) getString;
  final void Function(Locale) onLocaleChange;
  final bool isAdmin;
  final void Function(bool) onAdminChange;
  final String currentThemeKey;
  final void Function(String) onThemeChange;

  const MushroomListPage({
    super.key,
    required this.getString,
    required this.onLocaleChange,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
  });

  @override
  State<MushroomListPage> createState() => _MushroomListPageState();
}

class _MushroomListPageState extends State<MushroomListPage> {
  List<Mushroom> allMushrooms = [];
  List<Mushroom> filteredMushrooms = [];
  String searchQuery = '';
  Habitat? selectedHabitat;
  Statut? selectedStatut;
  CuloarePalarie? selectedCuloare;

  @override
  void initState() {
    super.initState();
    loadMushrooms();
  }

  Future<void> loadMushrooms() async {
    final jsonString = await rootBundle.loadString('assets/mushrooms.json');
    final jsonData = json.decode(jsonString);
    setState(() {
      allMushrooms = (jsonData as List).map((e) => Mushroom.fromJson(e)).toList();
      filteredMushrooms = List.from(allMushrooms);
    });
  }

  void applyFilters() {
    setState(() {
      filteredMushrooms = allMushrooms.where((m) {
        final langCode = Localizations.localeOf(context).languageCode;
        final matchSearch = m.getName(langCode).toLowerCase().contains(searchQuery.toLowerCase());
        final matchHabitat = selectedHabitat == null || m.habitat == selectedHabitat;
        final matchStatut = selectedStatut == null || m.statut == selectedStatut;
        final matchCuloare = selectedCuloare == null || m.culoarePalarie == selectedCuloare;
        return matchSearch && matchHabitat && matchStatut && matchCuloare;
      }).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    final langCode = Localizations.localeOf(context).languageCode;

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.getString('mushroomList')),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              decoration: InputDecoration(
                hintText: widget.getString('searchHint'),
                prefixIcon: const Icon(Icons.search),
                border: const OutlineInputBorder(),
              ),
              onChanged: (val) {
                searchQuery = val;
                applyFilters();
              },
            ),
          ),
          Wrap(
            spacing: 8,
            children: [
              DropdownButton<Habitat?>(
                value: selectedHabitat,
                hint: Text(widget.getString('habitat')),
                items: [null, ...Habitat.values]
                    .map(
                      (h) => DropdownMenuItem(
                        value: h,
                        child: Text(h == null
                            ? widget.getString('all')
                            : h.toString().split('.').last),
                      ),
                    )
                    .toList(),
                onChanged: (val) {
                  selectedHabitat = val;
                  applyFilters();
                },
              ),
              DropdownButton<Statut?>(
                value: selectedStatut,
                hint: Text(widget.getString('statut')),
                items: [null, ...Statut.values]
                    .map(
                      (s) => DropdownMenuItem(
                        value: s,
                        child: Text(s == null
                            ? widget.getString('all')
                            : s.toString().split('.').last),
                      ),
                    )
                    .toList(),
                onChanged: (val) {
                  selectedStatut = val;
                  applyFilters();
                },
              ),
              DropdownButton<CuloarePalarie?>(
                value: selectedCuloare,
                hint: Text(widget.getString('culoare')),
                items: [null, ...CuloarePalarie.values]
                    .map(
                      (c) => DropdownMenuItem(
                        value: c,
                        child: Text(c == null
                            ? widget.getString('all')
                            : c.toString().split('.').last),
                      ),
                    )
                    .toList(),
                onChanged: (val) {
                  selectedCuloare = val;
                  applyFilters();
                },
              ),
            ],
          ),
          Expanded(
            child: ListView.builder(
              itemCount: filteredMushrooms.length,
              itemBuilder: (context, index) {
                final mushroom = filteredMushrooms[index];
                return ListTile(
                  leading: Image.asset(mushroom.imagePath, width: 50, height: 50),
                  title: Text(mushroom.getName(langCode)),
                  subtitle: Text(mushroom.getDescription(langCode)),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) =>
                            MushroomDetailPage(mushroom: mushroom, getString: widget.getString),
                      ),
                    );
                  },
                );
              },
            ),
          )
        ],
      ),
    );
  }
}

class MushroomDetailPage extends StatefulWidget {
  final Mushroom mushroom;
  final String Function(String) getString;

  const MushroomDetailPage({super.key, required this.mushroom, required this.getString});

  @override
  State<MushroomDetailPage> createState() => _MushroomDetailPageState();
}

class _MushroomDetailPageState extends State<MushroomDetailPage> {
  late Box favoritesBox;
  late Box notesBox;
  late Box accessBox;

  bool isFavorite = false;
  String userNote = '';

  late TextEditingController _noteController;
  bool accessGranted = false;

  @override
  void initState() {
    super.initState();
    favoritesBox = Hive.box('favoriteMushrooms');
    notesBox = Hive.box('mushroomNotes');
    accessBox = Hive.box('accessControl');

    final favList = favoritesBox.get('favorites')?.cast<int>() ?? [];
    final notesMap = Map<int, String>.from(notesBox.get('notes') ?? {});

    isFavorite = favList.contains(widget.mushroom.id);
    userNote = notesMap[widget.mushroom.id] ?? '';

    _noteController = TextEditingController(text: userNote);

    _checkAccess();
  }

  Future<void> _checkAccess() async {
    if (accessBox.get('hasValidInvitationCode', defaultValue: false)) {
      setState(() {
        accessGranted = true;
      });
      return;
    }

    if (!accessBox.containsKey('freeAttempts')) {
      await accessBox.put('freeAttempts', 5);
    }

    int attemptsLeft = accessBox.get('freeAttempts');

    if (attemptsLeft > 0) {
      attemptsLeft--;
      await accessBox.put('freeAttempts', attemptsLeft);
      setState(() {
        accessGranted = true;
      });
    } else {
      _showInvitationCodeDialog();
    }
  }

  void _showInvitationCodeDialog() {
    final TextEditingController codeController = TextEditingController();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          title: Text(widget.getString('invitationCodeNeeded')),
          content: TextField(
            controller: codeController,
            autofocus: true,
            decoration: InputDecoration(hintText: widget.getString('enterInvitationCode')),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pop(); // Back to list
              },
              child: Text(widget.getString('invitationCodeCancel')),
            ),
            TextButton(
              onPressed: () {
                final inputCode = codeController.text.trim();
                if (inputCode == 'INV2025') {
                  accessBox.put('hasValidInvitationCode', true);
                  Navigator.of(context).pop();
                  setState(() {
                    accessGranted = true;
                  });
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                    content: Text(widget.getString('invitationCodeIncorrect')),
                    backgroundColor: Colors.red,
                  ));
                }
              },
              child: Text(widget.getString('invitationCodeConfirm')),
            ),
          ],
        );
      },
    );
  }

  void toggleFavorite() {
    setState(() {
      isFavorite = !isFavorite;
      final favList = favoritesBox.get('favorites')?.cast<int>() ?? [];
      if (isFavorite) {
        favList.add(widget.mushroom.id);
      } else {
        favList.remove(widget.mushroom.id);
      }
      favoritesBox.put('favorites', favList);
    });
  }

  void saveNote() {
    final notesMap = Map<int, String>.from(notesBox.get('notes') ?? {});
    notesMap[widget.mushroom.id] = _noteController.text;
    notesBox.put('notes', notesMap);
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text(widget.getString('noteSaved')),
    ));
  }

  @override
  Widget build(BuildContext context) {
    final langCode = Localizations.localeOf(context).languageCode;

    if (!accessGranted) {
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.getString('appTitle')),
        ),
        body: Center(
          child: Text(widget.getString('accessRestricted')),
        ),
      );
    }

    Widget? warningWidget;
    if (widget.mushroom.statut == Statut.toxic || widget.mushroom.statut == Statut.necunoscut) {
      warningWidget = Container(
        margin: const EdgeInsets.only(bottom: 12),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.red.shade100,
          border: Border.all(color: Colors.red, width: 2),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: const [
            Icon(Icons.warning_amber_rounded, color: Colors.red, size: 30),
            SizedBox(width: 10),
            Expanded(
              child: Text(
                '‚ö†Ô∏è Aten»õie: ComparƒÉ aceastƒÉ specie cu altele similare!',
                style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
            ),
          ],
        ),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.mushroom.getName(langCode)),
        actions: [
          IconButton(
            icon: Icon(isFavorite ? Icons.star : Icons.star_border),
            onPressed: toggleFavorite,
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (warningWidget != null) warningWidget,
            Image.asset(widget.mushroom.imagePath, height: 200),
            const SizedBox(height: 12),
            Text(
              widget.mushroom.getDescription(langCode),
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 20),
            Text(widget.getString('notes'), style: const TextStyle(fontWeight: FontWeight.bold)),
            TextField(
              controller: _noteController,
              maxLines: 4,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                hintText: widget.getString('notes'),
              ),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: saveNote,
              child: Text(widget.getString('saveNote')),
            ),
          ],
        ),
      ),
    );
  }
}

class SettingsPage extends StatelessWidget {
  final void Function(Locale) onLocaleChange;
  final String Function(String) getString;
  final bool isAdmin;
  final void Function(bool) onAdminChange;

  final String currentThemeKey;
  final void Function(String) onThemeChange;

  const SettingsPage({
    super.key,
    required this.onLocaleChange,
    required this.getString,
    required this.isAdmin,
    required this.onAdminChange,
    required this.currentThemeKey,
    required this.onThemeChange,
  });

  void _showAdminCodeDialog(BuildContext context) {
    final TextEditingController codeController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(getString('enterAdminCode')),
          content: TextField(
            controller: codeController,
            obscureText: true,
            decoration: InputDecoration(hintText: getString('enterAdminCode')),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(getString('adminCodeError')),
            ),
            TextButton(
              onPressed: () {
                if (codeController.text == 'Wyaly1995') {
                  onAdminChange(true);
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(getString('adminActivated'))),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(getString('adminCodeError'))),
                  );
                }
              },
              child: Text(getString('activateAdmin')),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(getString('settings')),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            Text(getString('changeLanguage'), style: const TextStyle(fontWeight: FontWeight.bold)),
            Wrap(
              spacing: 10,
              children: supportedLocales.map((loc) {
                return ChoiceChip(
                  label: Text(loc.languageCode.toUpperCase()),
                  selected: Localizations.localeOf(context).languageCode == loc.languageCode,
                  onSelected: (_) => onLocaleChange(loc),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            Text(getString('changeTheme'), style: const TextStyle(fontWeight: FontWeight.bold)),
            Wrap(
              spacing: 10,
              children: appThemes.keys.map((themeKey) {
                return ChoiceChip(
                  label: Text(themeKey),
                  selected: currentThemeKey == themeKey,
                  onSelected: (_) => onThemeChange(themeKey),
                );
              }).toList(),
            ),
            const SizedBox(height: 20),
            if (!isAdmin)
              ElevatedButton(
                onPressed: () => _showAdminCodeDialog(context),
                child: Text(getString('activateAdmin')),
              ),
            if (isAdmin)
              Text(
                getString('adminMode'),
                style: const TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
              ),
          ],
        ),
      ),
    );
  }
}

// MODEL PENTRU √éNTREBARE QUIZ
class QuizQuestion {
  final String question;
  final List<String> options;
  final int correctAnswerIndex;

  QuizQuestion({
    required this.question,
    required this.options,
    required this.correctAnswerIndex,
  });
}

// PAGINA QUIZ
class QuizPage extends StatefulWidget {
  final String Function(String) getString;

  const QuizPage({super.key, required this.getString});

  @override
  State<QuizPage> createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  final List<QuizQuestion> questions = [
    QuizQuestion(
      question: 'Ce habitat preferƒÉ ciupercile conifere?',
      options: ['PƒÉduri de conifere', 'PƒÉduri foioase', 'Zone umede'],
      correctAnswerIndex: 0,
    ),
    QuizQuestion(
      question: 'Ce culoare are pƒÉlƒÉria ciupercii Amanita muscaria?',
      options: ['Ro»ôu', 'Alb', 'Galben'],
      correctAnswerIndex: 0,
    ),
    QuizQuestion(
      question: 'Care este statutul ciupercii Amanita phalloides?',
      options: ['Toxic', 'Comestibil', 'Necunoscut'],
      correctAnswerIndex: 0,
    ),
  ];

  int currentQuestionIndex = 0;
  int score = 0;
  bool answered = false;
  int? selectedOptionIndex;

  void selectOption(int index) {
    if (answered) return;

    setState(() {
      selectedOptionIndex = index;
      answered = true;
      if (index == questions[currentQuestionIndex].correctAnswerIndex) {
        score++;
      }
    });
  }

  void nextQuestion() {
    setState(() {
      currentQuestionIndex++;
      answered = false;
      selectedOptionIndex = null;
    });
  }

  void restartQuiz() {
    setState(() {
      currentQuestionIndex = 0;
      score = 0;
      answered = false;
      selectedOptionIndex = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (currentQuestionIndex >= questions.length) {
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.getString('appTitle') + ' - Quiz'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Ai terminat quizul!\nScor: $score/${questions.length}',
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 24),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: restartQuiz,
                child: const Text('Restart Quiz'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('√énapoi'),
              ),
            ],
          ),
        ),
      );
    }

    final question = questions[currentQuestionIndex];

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.getString('appTitle') + ' - Quiz'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '√éntrebarea ${currentQuestionIndex + 1}/${questions.length}',
              style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
            ),
            const SizedBox(height: 12),
            Text(
              question.question,
              style: const TextStyle(fontSize: 20),
            ),
            const SizedBox(height: 20),
            ...List.generate(question.options.length, (index) {
              final option = question.options[index];
              final bool isCorrect = index == question.correctAnswerIndex;
              final bool isSelected = index == selectedOptionIndex;
              Color? color;
              if (answered) {
                if (isSelected) {
                  color = isCorrect ? Colors.green : Colors.red;
                } else if (isCorrect) {
                  color = Colors.green;
                }
              }
              return Card(
                color: color,
                child: ListTile(
                  title: Text(option),
                  onTap: () => selectOption(index),
                ),
              );
            }),
            const SizedBox(height: 20),
            if (answered)
              Align(
                alignment: Alignment.centerRight,
                child: ElevatedButton(
                  onPressed: nextQuestion,
                  child: const Text('UrmƒÉtoarea'),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
